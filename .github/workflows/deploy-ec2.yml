name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Job 1: Set up Docker and build containers
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io
          
      - name: Build Docker containers
        run: |
          sudo docker build -t ecom-backend ./backend
          sudo docker build -t ecom-frontend ./frontend

      - name: Push Docker images to DockerHub
        run: |
          sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          sudo docker push ${{ secrets.DOCKER_USERNAME }}/ecom-backend
          sudo docker push ${{ secrets.DOCKER_USERNAME }}/ecom-frontend

  # Job 2: Deploy Docker containers to EC2 (optional, but can be included in this pipeline)
  deploy:
    runs-on: ubuntu-latest
    needs: docker  # This job depends on the docker job
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up SSH for EC2 access
        run: |
          echo "$EC2_SSH_KEY" > private_key.pem
          chmod 600 private_key.pem

      - name: Deploy backend and frontend containers to EC2
        run: |
          ssh -i private_key.pem ec2-user@13.201.85.2 << 'EOF'
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/ecom-backend
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/ecom-frontend
            sudo docker stop backend || true && sudo docker rm backend || true
            sudo docker stop frontend || true && sudo docker rm frontend || true
            sudo docker run -d -p 5000:5000 --name backend ${{ secrets.DOCKER_USERNAME }}/ecom-backend
            sudo docker run -d -p 3000:3000 --name frontend ${{ secrets.DOCKER_USERNAME }}/ecom-frontend
          EOF
