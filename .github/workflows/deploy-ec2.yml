name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/ecom-backend ./backend
          docker push ${{ secrets.DOCKER_USERNAME }}/ecom-backend

      - name: Build and push frontend Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/ecom-frontend ./frontend
          docker push ${{ secrets.DOCKER_USERNAME }}/ecom-frontend

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Install Docker if not already installed
            if ! command -v docker &> /dev/null
            then
              echo "Docker not found. Installing..."
              sudo apt-get update
              sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
              echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io
              sudo usermod -aG docker ubuntu
              newgrp docker
              echo "Docker installed."
            else
              echo "Docker already installed."
            fi

            # Pull latest Docker images
            docker pull ${{ secrets.DOCKER_USERNAME }}/ecom-backend
            docker pull ${{ secrets.DOCKER_USERNAME }}/ecom-frontend

            # Stop and remove existing containers
            docker stop backend || true && docker rm backend || true
            docker stop frontend || true && docker rm frontend || true

            # Run new containers
            docker run -d -p 5000:5000 --name backend ${{ secrets.DOCKER_USERNAME }}/ecom-backend
            docker run -d -p 3000:3000 --name frontend ${{ secrets.DOCKER_USERNAME }}/ecom-frontend
